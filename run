#!/usr/bin/env python3.6
"""
Run script.
"""
import argparse
import os
import shlex
from functools import wraps
from typing import List

import configurations.importer
import sys
from clinner.command import Type as CommandType, command
from clinner.run.main import HealthCheckMixin, Main as ClinnerMain

PYTHON = 'python3.6'
COVERAGE = 'coverage'
PROSPECTOR = 'prospector'
UWSGI = 'uwsgi'

DONATE_TEXT = '''
This project is free and open sourced, you can use it, spread the word, contribute to the codebase and help us donating:
* Ether: 0x566d41b925ed1d9f643748d652f4e66593cba9c9
* Bitcoin: 1Jtj2m65DN2UsUzxXhr355x38T6pPGhqiA
* PayPal: barrenerobot@gmail.com
'''


def donate(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)

        print(DONATE_TEXT)

        return result
    return wrapper


class Main(HealthCheckMixin, ClinnerMain):
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument('-s', '--settings', default='barrenero_api.settings:Development', help='Settings class')

    def inject_app_settings(self):
        """
        Injecting own settings.
        """
        host = os.environ.get('APP_HOST', '0.0.0.0')
        port = os.environ.get('APP_PORT', '80')

        os.environ['APP_HOST'] = host
        os.environ['APP_PORT'] = port
        os.environ['DJANGO_SETTINGS_MODULE'], os.environ['DJANGO_CONFIGURATION'] = self.args.settings.rsplit(':', 1)
        os.environ['HEALTH_CHECK_SETTINGS'] = self.args.settings

        # Mark django-configurations as installed to avoid setup error
        configurations.importer.install()

    def health_check(self):
        """
        Does a check using Health Check application.

        :return: 0 if healthy.
        """
        return not self.run_command('manage', 'health_check', 'health', '-e')


@command(command_type=CommandType.SHELL,
         parser_opts={'help': 'Django manage commands'})
@donate
def manage(*args, **kwargs) -> List[List[str]]:
    cmd = shlex.split(f'{PYTHON} manage.py')
    cmd += args
    return [cmd]


@command(command_type=CommandType.SHELL,
         parser_opts={'help': 'Django migrate command'})
@donate
def migrate(*args, **kwargs) -> List[List[str]]:
    return manage('migrate', *args)


@command(command_type=CommandType.SHELL,
         parser_opts={'help': 'Django collectstatic command'})
@donate
def collectstatic(*args, **kwargs) -> List[List[str]]:
    return manage('collectstatic', *args)


@command(command_type=CommandType.SHELL,
         parser_opts={'help': 'Migrate and collectstatic'})
@donate
def build(*args, **kwargs) -> List[List[str]]:
    return migrate('--fake-initial') + collectstatic('--noinput')


@command(command_type=CommandType.SHELL,
         parser_opts={'help': 'Run prospector'})
@donate
def prospector(*args, **kwargs) -> List[List[str]]:
    cmd = [PROSPECTOR]
    cmd += args
    return [cmd]


@command(command_type=CommandType.SHELL,
         parser_opts={'help': 'Django runserver'})
@donate
def runserver(*args, **kwargs) -> List[List[str]]:
    return build() + manage('runserver', *args)


@command(command_type=CommandType.SHELL,
         parser_opts={'help': 'Start server'})
@donate
def start(*args, **kwargs) -> List[List[str]]:
    http = '{}:{}'.format('', os.environ['APP_PORT'])
    cmd = [UWSGI, '--http', http]
    cmd += args
    return build() + [cmd]


@command(command_type=CommandType.SHELL,
         parser_opts={'help': 'Django shell'})
@donate
def shell(*args, **kwargs) -> List[List[str]]:
    return manage('shell_plus', *args)


if __name__ == '__main__':
    main = Main()
    sys.exit(main.run())
